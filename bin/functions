#!/usr/bin/env bash
# If a command fails we want to abort right away, and we do not want to use unset variables
set -euo pipefail

# shellcheck source=/dev/null
source "${ASDF_DIR}/lib/utils.bash"
CACHE_DIR="${TMPDIR:-/tmp}/asdf-java.cache"

if [[ ! -d "${CACHE_DIR}" ]]
then
    mkdir -p "${CACHE_DIR}"
fi

KERNEL_NAME="$(uname -s)"
case "${KERNEL_NAME}" in
    Darwin)
            OS="macosx"
            SHA256SUM="shasum -a 256"
            STAT="/usr/bin/stat"
            STAT_OPTS=('-f' '%c')
            TEMP_DIR=$(/usr/bin/mktemp -dt asdf-java)
            ;;
    Linux)
           OS="linux"
           SHA256SUM="sha256sum"
           STAT="stat"
           STAT_OPTS=('-c' '%Z')
           TEMP_DIR=$(mktemp -dp /tmp asdf-java.XXXXXXXX)
           ;;
    *) >&2 printf "Unknown operating system: %s\n" "${KERNEL_NAME}"
       exit 1
esac

trap 'test -d "${TEMP_DIR}" && rm -rf "${TEMP_DIR}"' EXIT

MACHINE="$(uname -m)"
case "${MACHINE}" in
    x86_64) ARCHITECTURE="x86_64" ;;
    aarch64|arm64) ARCHITECTURE="aarch64" ;;
    armv7l) ARCHITECTURE="arm32-vfp-hflt" ;;
    *) >&2 printf "Unknown machine architecture: %s\n" "${MACHINE}"
       exit 1
esac

function check-unzip() {
    USAGE="Install unzip to continue. Aborting."

    if ! [[ -x "$(command -v unzip)" ]]; then
        >&2 printf "%s\n" "${USAGE}"
        exit 1
    fi
}

function retrieve-release-data() {
    local cache_file="${CACHE_DIR}/releases.tsv"

    # shellcheck disable=SC2046
    if [[ ! -r "${cache_file}" ]] || (( $($STAT "${STAT_OPTS[@]}" "${cache_file}") <= $(date +%s) - 3600 )) ; then
        curl -s -f --compressed -L "https://raw.githubusercontent.com/halcyon/asdf-java/master/data/jdk-${OS}-${ARCHITECTURE}.tsv" -o "${cache_file}"
    fi
}

function list-all() {
    retrieve-release-data
    cut -d $'\t' -f 1 "${CACHE_DIR}/releases.tsv" | uniq | tr '\n' ' '
}

function list-legacy-filenames() {
    printf ".java-version\n"
}

function install {
    local release_data package_link package_filename checksum
    local -a dirs

    retrieve-release-data

    release_data=$(grep "^${ASDF_INSTALL_VERSION}	" "${CACHE_DIR}/releases.tsv" | tail -n 1)
    if [[ -z "${release_data}" ]]; then
        >&2 printf "Unknown release: %s\n" "${ASDF_INSTALL_VERSION}"
        exit 1
    fi

    package_filename=$(cut -d $'\t' -f 2 <<<"${release_data}")
    package_link=$(cut -d $'\t' -f 3 <<<"${release_data}")
    checksum=$(cut -d $'\t' -f 4 <<<"${release_data}")

    if [[ "${package_filename: -4}" == ".zip" ]]; then
        check-unzip
    fi

    cd "${TEMP_DIR}"

    if [[ "${OS}" == "macosx" &&
          "${ASDF_INSTALL_VERSION}" == "liberica"* &&
          "$(get_asdf_config_value "java_macos_integration_enable")" = "yes" ]]; then
        # change package_filename, link and checksum
        new_package_filename="${package_filename/tar.gz/pkg}"
        new_package_filename="${new_package_filename/zip/pkg}"
        http_status=$(curl -s -o sha256 -w "%{http_code}" "https://joschi.github.io/java-metadata/checksums/liberica/${new_package_filename}.sha256")
        new_checksum=$(cat sha256)
        rm sha256
        if [[ "${http_status}" = "200" && "${#new_checksum}" -gt 0 ]]; then
            package_filename=${new_package_filename}
            package_link=${package_link/tar.gz/pkg}
            package_link=${package_link/zip/pkg}
            IFS=" " read -r -a checksum_parts <<< "${new_checksum}"
            checksum=${checksum_parts[0]}
        else
            >&2 printf "Could not find a PKG version of %s so the macOS java_home integration will not work for this version\nSee https://github.com/halcyon/asdf-java/blob/master/README.md for more information\n" "${ASDF_INSTALL_VERSION}"
        fi
    fi

    curl -LO -# -w "${package_filename}\n" "${package_link}"

    ${SHA256SUM} -c <<<"${checksum}  ${package_filename}"

    case "${package_filename}" in
        *zip) unzip -q "${package_filename}"
              ;;
        *tar.gz) tar xf "${package_filename}"
                 ;;
        *pkg) mkdir "${ASDF_INSTALL_VERSION}"
              cd "${ASDF_INSTALL_VERSION}"
              pkgutil --expand "../${package_filename}" tmp
              gunzip -dc < tmp/*.pkg/Payload | cpio -i
              rm -r tmp
              cd ..
              ;;
        *) >&2 printf "Cannot extract %s\n" "${package_filename}"
           exit 1
           ;;
    esac

    read -r -a dirs <<<"$(ls -d ./*/)"
    cd "${dirs[0]}"
    if [[ ! -d "${ASDF_INSTALL_PATH}" ]]; then
        mkdir -p "${ASDF_INSTALL_PATH}"
    fi

    case ${OS} in
        macosx)
            case ${ASDF_INSTALL_VERSION} in
                zulu*)
                    mv ./* "${ASDF_INSTALL_PATH}" 
                    if [[ "$(get_asdf_config_value "java_macos_integration_enable")" = "yes" ]]; then
                        local macOS_integration_path
                        macOS_integration_path="$(dirname "$(dirname "$(dirname "$(absolute_dir_path "${ASDF_INSTALL_PATH}/bin/..")")")")"
                        java_macos_integration_install "$macOS_integration_path"
                    fi
                    ;;
                liberica*)
                    if [[ "$(get_asdf_config_value "java_macos_integration_enable")" = "yes" &&
                          "${package_filename}" = *".pkg" ]]; then
                        mv Contents/Home/* "${ASDF_INSTALL_PATH}"
                        local macOS_integration_path
                        macOS_integration_path="$(absolute_dir_path ".")"
                        java_macos_integration_install "$macOS_integration_path"
                    else
                        mv ./* "${ASDF_INSTALL_PATH}"
                    fi
                    ;;
                *) 
                    mv Contents/Home/* "${ASDF_INSTALL_PATH}" 
                    if [[ "$(get_asdf_config_value "java_macos_integration_enable")" = "yes" ]]; then
                        local macOS_integration_path
                        macOS_integration_path="$(absolute_dir_path ".")"
                        java_macos_integration_install "$macOS_integration_path"
                    fi
                    ;;
            esac ;;
        *) mv ./* "${ASDF_INSTALL_PATH}" ;;
    esac
}

function uninstall {
    case ${OS} in
        macosx)
          if [[ -n "${ASDF_INSTALL_VERSION}" && "$(get_asdf_config_value "java_macos_integration_enable")" = "yes" ]]; then
              java_macos_integration_remove
          fi
    esac
    rm -rf "${ASDF_INSTALL_PATH}"
}

function java_macos_integration_remove {
    if [[ -d "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}" ]]; then
        printf "Removing the integration with /usr/libexec/java_home needs root permission to delete the folder at /Library/Java/JavaVirtualMachines/%s\n" "${ASDF_INSTALL_VERSION}"
        sudo rm -rf "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}"
    fi
}

function java_macos_integration_install {
    local macOS_files_path
    macOS_files_path="$1"
    printf "Integrating with /usr/libexec/java_home needs root permission for it to create folders under /Library/Java/JavaVirtualMachines\n"
    sudo mkdir -p "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}/Contents"
    sudo cp -R "${macOS_files_path}/Contents/MacOS" "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}/Contents/"
    sudo cp -R "${macOS_files_path}/Contents/Info.plist" "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}/Contents/"
    sudo ln -s "${ASDF_INSTALL_PATH}" "/Library/Java/JavaVirtualMachines/${ASDF_INSTALL_VERSION}/Contents/Home"
}

function absolute_dir_path {
    local absolute_path
    absolute_path="$( cd -P "$( dirname "$1" )" && pwd )"
    echo "$absolute_path"
}

case "$(basename "${0}")" in
    list-all) list-all
              ;;
    list-legacy-filenames) list-legacy-filenames
                           ;;
    install) install
             ;;
    uninstall) uninstall
               ;;
esac
